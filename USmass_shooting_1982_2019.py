# -*- coding: utf-8 -*-
"""Mass_Shooting 1982-2020

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uOGEyabYZPY57YOMR4TNu2ufCjkgz9dd
"""

#น.ส.ธนาภรณ์ หงษ์ทอง 6209650206
#น.ส.รมิตา สุทธิ 6209650677

import pandas as pd
ms = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/csvMother-Jones-Mass-Shootings-Database_-1982-2019.csv")
print(ms)

from google.colab import drive
drive.mount('/content/drive')

ms.columns

ms.head(15) #15 first row,all column >> index row 0-14

ms.info()

ms.describe()

print(ms['age_of_shooter'])
print("missing data in column 'age_of_shooter' : ",ms['age_of_shooter'].isna().sum())

import pandas as pd
ms_age_mean = ms['age_of_shooter'].mean()
ms['age_of_shooter'] = ms['age_of_shooter'].fillna(ms_age_mean)
print(ms['age_of_shooter'])

# Commented out IPython magic to ensure Python compatibility.
import matplotlib as mpl 
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
# %matplotlib inline 
#print(ms['age_of_shooter'])
age_max = ms['age_of_shooter'].max()  
print("Maximum age of shooter :",age_max)
age_min = ms['age_of_shooter'].min()  
print("Minimum age of shooter :",age_min)
for i in (ms['age_of_shooter']):
    ageless30 = ms[ms['age_of_shooter']<30]
    agemore30 = ms[ms['age_of_shooter']>=30]
    agemore45 = ms[ms['age_of_shooter']>=45]
    ageless45 = agemore30['age_of_shooter'].count() - agemore45['age_of_shooter'].count()
Group1 = ageless30['age_of_shooter'].count()
Group2 = ageless45
Group3 = agemore45['age_of_shooter'].count()
print("Group1 : ",Group1)
print("Group2 : ",Group2)
print("Group3 : ",Group3)
plt.figure(figsize=[10,5])
fp = mpl.font_manager.FontProperties(size=15)
x = np.arange(0,3)
y = [Group1,Group2,Group3]
ages = ['age 11-29','age 30-44','age 45-66']
ax = plt.gca(xticks=x)
ax.set_xticklabels(ages,fontproperties=fp)
plt.title('Age of Shooter',fontsize=20)
plt.ylabel('Number of age',fontsize=15)
_=plt.bar(x,y,color='#CAE9E0')

# Commented out IPython magic to ensure Python compatibility.
import matplotlib as mpl 
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
# %matplotlib inline

fig = plt.figure()

plt.rcParams['figure.figsize'] = [10,10]
plt.rcParams["font.weight"] = "bold"

fontdict={'fontsize': 10,
          'weight' : 'bold',
          'color' : 'black'
         }

fontdicty={'fontsize': 10,
          'weight' : 'bold',
          'verticalalignment': 'baseline',
          'horizontalalignment': 'center',
          'color' : 'black'
          }

fontdictx={'fontsize': 10,
          'weight' : 'bold',
          'horizontalalignment': 'center'}

plt.subplots_adjust(wspace=0.2, hspace=0.2)

#fig.suptitle('Position', fontsize=10,fontweight="bold", color="white", 
             #position=(0,0))

ax1 = fig.add_subplot(221)
ax1.scatter('latitude', 'longitude', data=ms, c="coral")
ax1.set_title('Position', fontdict=fontdict, color="black")
ax1.set_xlabel("Latitude", fontdict=fontdicty, position=(0.5,0))
_=ax1.set_ylabel("Longitude", fontdict=fontdicty, position=(0,0.5))

ax2 = fig.add_subplot(222)
ax2.scatter('latitude', 'longitude', data=ms, c="orange")
ax2.set_title('Position', fontdict=fontdict, color="black")
ax2.set_xlabel("Latitude", fontdict=fontdicty, position=(0.5,0))
_=ax2.set_ylabel("Longitude", fontdict=fontdicty, position=(0,0.5))

print(ms['latitude'].mean())
print(ms['longitude'].mean())
#kansas

#plt.style.use('classic')   # Use 'classic' style
plt.style.use('ggplot')     # Explore the use of different styles 
ms_fatal = ms['fatalities'].sum()
ms_inj = ms['injured'].sum()
ms_totalvic = ms_fatal+ms_inj
print("Total of Fatalities : ",ms_fatal)
print("Total of Injered : ",ms_inj)
print("Total of Victims : ",ms_totalvic)
x = ['fatalities', 'injured', 'total_victims']
revenue = (ms_fatal,ms_inj,ms_totalvic)

x_pos = [i for i, _ in enumerate(x)]

#print(x_pos)

plt.bar(x_pos, revenue, color='brown')
plt.ylabel("Number of people")
plt.title("Total Victims")

_=plt.xticks(x_pos, x)

#plt.show()

N = 3

revenue = (37600000, 6445000, 6045000)
tax = (37000000, 4476000, 5403000)

ind = np.arange(N)      # ind = (0, 1, 2)
width = 0.35       
plt.bar(ind, revenue, width, label='Revenue') 
plt.bar(ind + width, tax, width, label='Tax') # Notice the computation we need to make for the positions of each bar

plt.ylabel('VND')
plt.title('Telecom service revenues in Vietnam')

plt.xticks(ind + width / 2, ('Viettel', 'VNPT', 'Mobiphone'))
_=plt.legend(loc='best')
#plt.show()

import numpy as np
y = ms['year'].unique()
year = np.sort(y)
print(year)

u = ms[ms['year'] == 2019].mean()
#u      #show mean all columns
print(u['total_victims'])

import numpy as np
for i in (year):
    u = ms[ms['year'] == i].mean()
    print("mean total victims in ", i," : " ,u['total_victims'])

import numpy as np
print("Type of mass shooting :",ms['type'].unique())
Mass = []
Spree = []
for i in (year):
    masspree = ms[ms['year'] == i]
    mm = masspree[masspree['type']=='Mass'].count()
    
print(ms[ms['type']=='Mass'].count())    
    
    
   # Mass.append(masspree['type'].count())



print(mm)
#print(Mass)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib as mpl 
import matplotlib.pyplot as plt
# %matplotlib inline 
vpy = []
for i in (year):
    vicperyear = ms[ms['year']==i].mean()
    vpy.append(vicperyear['total_victims'])

#print(vpy)

plt.figure(figsize=(15, 10))
plt.plot(year,vpy,color='#493D5D')
plt.title('Rate of Total Victims per Year',fontsize=20)
plt.xlabel('Year',fontsize=15)
_=plt.ylabel('Mean of Total Victims',fontsize=15)
#plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
#plt.figure(figsize=(9, 5))
idx = 0
for i in (year):
    u = ms[ms['year'] == i].mean()
    #print("mean total victims in ", i," : " ,u['injured'])
    area_dict = (u['injured'])
    area = pd.Series(area_dict)
    idx = idx+1

print(area)


#plt.plot([1, 2, 3, 4])
#plt.ylabel('some numbers')
#plt.show()

import numpy as np
print("missing data in column 'gender' : ",ms['gender'].isna().sum())
p0 = ms['gender'].unique()
print("Data of gender : ",p0)

p1 = ms[ms['gender']== 'M'].count()
p2 = ms[ms['gender']== 'Male'].count()
p3 = ms[ms['gender']== 'F'].count()
p4 = ms[ms['gender']== 'Female'].count()
p5 = ms[ms['gender']== 'Male & Female'].count()
print("p1-p5 is data in each row")
print("p1-p5 before fill data: ",p1['gender'],p2['gender'],p3['gender'],p4['gender'],p5['gender'])                   #p5 is 'Male & Female' -> Male = 1, Female = 1

ms['gender'] = ms['gender'].fillna('Male')

pp1 = ms[ms['gender']== 'M'].count()
pp2 = ms[ms['gender']== 'Male'].count()
pp3 = ms[ms['gender']== 'F'].count()
pp4 = ms[ms['gender']== 'Female'].count()
pp5 = ms[ms['gender']== 'Male & Female'].count()

print("p1-p5 after fill data: ",pp1['gender'],pp2['gender'],pp3['gender'],pp4['gender'],pp5['gender'])                   #p5 is 'Male & Female' -> Male = 1, Female = 1
print("missing data in column 'gender' : ",ms['gender'].isna().sum())
male = pp1['gender']+pp2['gender']+1      # +1 from 'Male & Female'
female = pp3['gender']+pp4['gender']+1    # +1 from 'Male & Female'

print("Number of male : ",male)
print("Number of female : ",female)
if male>female:
  print("The most gender of Shooter is 'Male' : ",male," rows")
else:
  print("The most gender of Shooter is 'Female' : ",female," rows")

#plt.style.use('classic')   # Use 'classic' style
plt.style.use('ggplot')     # Explore the use of different styles 

m = male
f = female

x = ['Male', 'Female']
revenue = (m,f)

x_pos = [i for i, _ in enumerate(x)]
#print(x_pos)

plt.bar(x_pos, revenue, color='powderblue')
plt.ylabel("Number of people")
plt.title("Gender of Shooter")

_=plt.xticks(x_pos, x)

#plt.show()

N = 1
m = (male)
f = (female)

ind = np.arange(N)      # ind = (0, 1, 2)
width = 0.35     
plt.bar(ind, m, width, label='Male', color='darksalmon') 
plt.bar(ind + width, f, width, label='Female',color='skyblue') # Notice the computation we need to make for the positions of each bar

plt.ylabel('Number of people')
plt.title('Gender of shooter')

plt.xticks(ind + width/2,('Male                                  Female',))
_=plt.legend(loc='best')

import numpy as np
print("missing data in column 'weapon_type' : ",ms['weapon_type'].isna().sum())
p0 = ms['weapon_type'].unique()
print("Data of gender : ",p0)

#p1 = ms[ms['gender']== 'M'].count()
#p2 = ms[ms['gender']== 'Male'].count()
#p3 = ms[ms['gender']== 'F'].count()
#p4 = ms[ms['gender']== 'Female'].count()
#p5 = ms[ms['gender']== 'Male & Female'].count()
print("p1-p5 is data in each row")
#print("p1-p5 before fill data: ",p1['weapon_type'],p2['weapon_type'],p3['weapon_type'],p4['weapon_type'],p5['weapon_type'])                   #p5 is 'Male & Female' -> Male = 1, Female = 1

import numpy as np
print("missing data in column 'race' : ",ms['race'].isna().sum())
r0 = ms['race'].unique()
print("Data of race : ",r0)

r1 = ms[ms['race']== 'Black'].count()
r2 = ms[ms['race']== 'White'].count()
r3 = ms[ms['race']== 'Latino'].count()
r4 = ms[ms['race']== 'Asian'].count()
r5 = ms[ms['race']== 'Other'].count()
r6 = ms[ms['race']== 'White '].count()
r7 = ms[ms['race']== 'Native American'].count()
r8 = ms[ms['race']== 'white'].count()
r9 = ms[ms['race']== 'black'].count()
r10 = ms[ms['race']== 'unclear'].count()

print("Data each row")
print("Data before fill data: ",r1['race'],r2['race'],r3['race'],r4['race'],r5['race'],r6['race'],r7['race'],r8['race'],r9['race'],r10['race'])

ms['race'] = ms['race'].fillna('white')

rr1 = ms[ms['race']== 'Black'].count()
rr2 = ms[ms['race']== 'White'].count()
rr3 = ms[ms['race']== 'Latino'].count()
rr4 = ms[ms['race']== 'Asian'].count()
rr5 = ms[ms['race']== 'Other'].count()
rr6 = ms[ms['race']== 'White '].count()
rr7 = ms[ms['race']== 'Native American'].count()
rr8 = ms[ms['race']== 'white'].count()
rr9 = ms[ms['race']== 'black'].count()
rr10 = ms[ms['race']== 'unclear'].count()

print("Data after fill data: ",rr1['race'],rr2['race'],rr3['race'],rr4['race'],rr5['race'],rr6['race'],rr7['race'],rr8['race'],rr9['race'],rr10['race'])                 
print("missing data in column 'race' : ",ms['race'].isna().sum())
white = rr2['race']+rr8['race']+rr6['race']      
black = rr1['race']+rr9['race']
latino = rr3['race']
asian = rr4['race']
other = rr5['race']
native_american = rr7['race']
unclear = rr10['race']

print("Race of people : white ",white)
print("Race of people : black",black)
print("Race of people : latino ",latino)
print("Race of people : asian ",asian)
print("Race of people : other ",other)
print("Race of people : native american ",native_american)
print("Race of people : unclear ",unclear)

import matplotlib.pyplot as plt
#plt.figure(figsize=[10,10])
#plt.pie([6,5,3,4])

labels = ['White','Black','Latino','Asian','Native American','Other','Unclear']
explode = [0.05,0,0,0,0,0,0.1]
colors = ['#FF3388','thistle','aquamarine','peachpuff','lightblue','pink','lemonchiffon']
plt.figure(figsize=[10,10])
plt.pie([70,21,10,8,5,3,1],autopct='%d%%',shadow=1,counterclock=0,startangle=90,labels=labels,explode=explode,colors=colors)
plt.show()

ms['prior_signs_mental_health_issues']

import numpy as np
print("missing data in column 'prior_signs_mental_health_issues' : ",ms['prior_signs_mental_health_issues'].isna().sum())
mh0 = ms['prior_signs_mental_health_issues'].unique()
print("Data of prior signs mental health issues : ",mh0)

h1 = ms[ms['prior_signs_mental_health_issues']== 'yes'].count()
h2 = ms[ms['prior_signs_mental_health_issues']== 'TBD'].count()
h3 = ms[ms['prior_signs_mental_health_issues']== 'Yes'].count()
h4 = ms[ms['prior_signs_mental_health_issues']== 'Unclear'].count()
h5 = ms[ms['prior_signs_mental_health_issues']== 'Unknown'].count()
h6 = ms[ms['prior_signs_mental_health_issues']== 'No'].count()
h7 = ms[ms['prior_signs_mental_health_issues']== 'Unclear '].count()

yes = h1+h3
TBD = h2
unclear = h4+h7
unknown = h5
no = h6

print("Data in each row")
print("Data before fill data: ", yes['prior_signs_mental_health_issues'],TBD['prior_signs_mental_health_issues'],unclear['prior_signs_mental_health_issues'],
      unknown['prior_signs_mental_health_issues'],no['prior_signs_mental_health_issues'])
print("Shooter has mental health problem : ",yes['prior_signs_mental_health_issues'])
print("Data to be determined : ",TBD['prior_signs_mental_health_issues'])
print("Data about Mental health of shooter is unclear : ",unclear['prior_signs_mental_health_issues'])
print("Data is unknown : ",unknown['prior_signs_mental_health_issues'])
print("Shooter hasn't mental health problem : ",no['prior_signs_mental_health_issues'])

ms['prior_signs_mental_health_issues'] = ms['prior_signs_mental_health_issues'].fillna('yes')

mh1 = ms[ms['prior_signs_mental_health_issues']== 'yes'].count()
mh2 = ms[ms['prior_signs_mental_health_issues']== 'TBD'].count()
mh3 = ms[ms['prior_signs_mental_health_issues']== 'Yes'].count()
mh4 = ms[ms['prior_signs_mental_health_issues']== 'Unclear'].count()
mh5 = ms[ms['prior_signs_mental_health_issues']== 'Unknown'].count()
mh6 = ms[ms['prior_signs_mental_health_issues']== 'No'].count()
mh7 = ms[ms['prior_signs_mental_health_issues']== 'Unclear '].count()

yes1 = mh1+mh3
TBD1 = mh2
unclear1 = mh4+mh7
unknown1 = mh5
no1 = mh6

print("Data after fill data: ", yes1['prior_signs_mental_health_issues'],TBD1['prior_signs_mental_health_issues'],unclear1['prior_signs_mental_health_issues'],
      unknown1['prior_signs_mental_health_issues'],no1['prior_signs_mental_health_issues'])     
print("missing data in column 'prior_signs_mental_health_issues' : ",ms['prior_signs_mental_health_issues'].isna().sum())

print("Shooter has mental health problem : ",yes1['prior_signs_mental_health_issues'])
print("Data to be determined : ",TBD1['prior_signs_mental_health_issues'])
print("Data about Mental health of shooter is unclear : ",unclear1['prior_signs_mental_health_issues'])
print("Data is unknown : ",unknown1['prior_signs_mental_health_issues'])
print("Shooter hasn't mental health problem : ",no1['prior_signs_mental_health_issues'])

labels = ['Have mental health problem','Data to be determined','Data unclear',"Unknown data","Haven't mental health problem"]
explode = [0.05,0,0,0,0]
colors = ['lightpink','#d0e7a3','wheat','sandybrown','skyblue']
plt.figure(figsize=[7,7])
plt.pie([71,5,24,1,17],autopct='%d%%',shadow=1,counterclock=0,startangle=90,labels=labels,explode=explode,colors=colors)
plt.show()

